Database Design

- Logical
- Physical

Database Development Life Cycle
- Requirement Analysis
  - Planning
  - System definition
- Database Design
  - Logical Model
  - Physical Model
- Implementation
  - Loading and Testing

2 types of database techniques
- Normalization
  - 1NF - each cell must contain single value
  - 2NF - it must be in 1NF, there should be a primary key
  - 3NF - it must be in 2NF, has no transitive functional dependencies
  - BCNF - Boyce-Codd NF / 3.5NF

- ER Modeling - Entity Relationship

=====================================

MySQL

- Database Handling

Check current database in which we are present
- SELECT database();

Create Database Syntax
- CREATE DATABASE db_name;

- CREATE DATABASE [IF NOT EXISTS] database_name [CHARACTER SET charset_name] [COLLATE collation_name] ENCRYPTION = {'Y' | 'N'}


How to check length and memory taken by each character ?

SET @str = CONVERT('Hello World' USING utf8);
SELECT LENGTH(@str), CHAR_LENGTH(@str);

==================================================
How to check if a table exists in MySQL ?

- SELECT * FROM information_schema.tables WHERE table_schema = "db_name" AND table_name = "table_name" LIMIT 1;

==================================================
Create Table
- CREATE TABLE [IF NOT EXISTS] table_name (col_name data_type, col_name data_type... table_constraints) ENGINE = storage_engine;

col_name data_type(length) [Not Null] [Default Value] [Auto_Increment] col_constraint


CREATE TABLE IF NOT EXISTS books (book_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) NOT NULL, author VARCHAR(255), status TINYINT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

CREATE TABLE IF NOT EXISTS users (user_id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(255), city VARCHAR(255));

CREATE TABLE IF NOT EXISTS books_issue (issue_id INT, book_id INT, user_id INT, issue_date DATE, due_date DATE, is_returned BOOLEAN NOT NULL DEFAULT FALSE, PRIMARY KEY (issue_id), FOREIGN KEY (book_id) REFERENCES books (book_id), FOREIGN KEY (user_id) REFERENCES users (user_id));


Foreign Key
Foreign Key [col_name] REFERENCES parent_table (col_name)
[ON DELETE ref_option]
[ON UPDATE ref_option]


CASCADE - value of matching rows in child table automatically gets deleted/updated
SET NULL - value of matching rows will be set as NULL
RESTRICT - rejects the deletion/updation on rows in parent table
NO ACTION - same as RESTRICT
SET DEFAULT - this action is rejected by InnoDB


CREATE TABLE IF NOT EXISTS books_issue (issue_id INT, book_id INT, user_id INT, issue_date DATE, due_date DATE, is_returned BOOLEAN NOT NULL DEFAULT FALSE, PRIMARY KEY (issue_id), FOREIGN KEY (book_id) REFERENCES books (book_id), FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE);


Table Operations
- Rename Table
 SYNTAX : RENAME TABLE old_table_name TO new_table_name
 Query : RENAME TABLE books_issue TO issued_books;

- Add New Column
 SYNTAX : ALTER TABLE table_name ADD new_col_name col_defintion [FIRST | AFTER col_name]
 ALTER TABLE books ADD quantity INT NOT NULL AFTER status;

- Modify Column
 SYNTAX : ALTER TABLE table_name MODIFY col_name col_def;
 ALTER TABLE books MODIFY quantity SMALLINT NOT NULL;

- Rename Column
 SYNTAX : ALTER TABLE table_name CHANGE COLUMN orig_col_name new_name col_definition
 ALTER TABLE books CHANGE COLUMN created_at stored_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP; 

DROP Column
 SYNTAX : ALTER TABLE table_name DROP COLUMN col_name;
 
DELETE Table
- deletes data row by row

TRUNCATE Table
- more efficient than delete table, because it drops the table and recreate empty table

Storage Engine
- InnoDB  - 64 TB
- MyISAM - 256 TB
- CSV

Data Types
- Numeric
	- Integral
	  - tinyint				- 1 Byte		-128 to 127
	  - smallint				- 2 Bytes		-32768 to 32767
	  - mediumint			- 3 Bytes
	  - int						- 4 Bytes
	  - bigint					- 8 Bytes
 	- Floating Point
	  - Float					- 4 Bytes
	  - Double				- 8 Bytes
	  - Decimal				- It varies

- Text/String
  - Char			- fixed length character string
  - Varchar		- variable length
  - TinyText		- 255 Bytes - 255 Character
  - Text			- 64 KB (65,535)
  - MediumText	- 16 MB
  - LongText	- 4 GB
  - Binary
  - TinyBlob 
  - Blob (Binary Large Object)
  - Medium Blob
  - LongBlob

- Boolean - MySQL donot have Boolean data type, so we take TinyInt(1)
- Date and Time
	- Date
	- Time
	- DateTime		- 1000-01-01 00:00:01 to 9999-12-31 23:59:59
	- TimeStamp	- 1970-01-01 00:00:01 to 2038-01-19 03:14:07

====================================================
Insert Data

SYNTAX : INSERT INTO table_name (c1, c2, c3...cn) VALUES (v1, v2, v3...), (v1, v2...);
SYNTAX : INSERT INTO table_name VALUES (v1, v2, v3...), (v1, v2...);

INSERT INTO books (book_id, title, author, status, quantity) VALUES (101, "Python Programming", "XYZ", 1,10);
INSERT INTO books (title, author, status, quantity) VALUES ("Let Us C", "John", 1,5);

INSERT INTO books (title, author, status, quantity) VALUES ("Head First Python", "OReilly", 1,3), ("Head First Java", "OReilly", 1,19), ("Head First Javascript", "OReilly", 1,7), ("Speaking JS", "MDN", 1,3);


Insert Multiple Row Limit
SHOW VARIABLES LIKE 'max_allowed_packet';

Set Size Limit
SET GLOBAL max_allowed_packet=10000;


Insert Into Select
SYNTAX : INSERT INTO table_name(col_list) SELECT select_col_list FROM another_table WHERE condition;


Insert Ignore
SYNTAX : INSERT IGNORE INTO table_name (col_list) VALUES (col_list)


INSERT IGNORE INTO books (book_id, title, author, status, quantity) VALUES (107,"Head First Python", "OReilly", 1,3), (108,"Head First Java", "OReilly", 1,19), (103,"Head First Javascript", "OReilly", 1,7), (104,"Speaking JS", "MDN", 1,3);

=====================================================

SELECT Query
SYNTAX : SELECT col_list FROM table_name;

SELECT * from books;

SELECT 1+1;
SELECT CONCAT("Ram"," ","Sharma");
SELECT CONCAT("Ram"," ","Sharma") as "full name";

Unique Rows
Syntax : SELECT DISTINCT col_list FROM table_name;

SELECT DISTINCT title, quantity from books;

=====================================================

Sorting Rows - ORDER BY
SYNTAX : SELECT col_list FROM table ORDER BY [ASC|DESC];
Query Execution Sequence - FROM -> SELECT -> ORDER BY

SELECT title, quantity, stored_at from books ORDER BY quantity desc;
SELECT title, quantity, stored_at from books ORDER BY quantity desc, title asc;

=====================================================
Where Clause
- to filter data

SYNTAX : SELECT * FROM table_name WHERE filter_condition;
FROM -> WHERE -> SELECT

SELECT * FROM books WHERE quantity >= 10;

Keywords / Operators
AND
OR
IN
BETWEEN
LIKE
LIMIT


AND Operator
SELECT * FROM books WHERE quantity >= 10 AND author = "OReilly";

OR Operator
SELECT * FROM books WHERE quantity >= 10 OR author = "OReilly";

AND + OR
SELECT * FROM books WHERE author = "OReilly" and (quantity >= 10 or stored_at > '2022-11-15 20:00:00');

SELECT * FROM books WHERE author = "OReilly" or author = "XYZ" or author = "John";

Alternative for OR - IN Operator
SELECT * FROM books WHERE author IN ("OReilly", "XYZ", "John");


BETWEEN
SELECT * FROM books WHERE quantity BETWEEN 5 AND 10;

SELECT * FROM books WHERE quantity NOT BETWEEN 5 AND 10;

SELECT * FROM books WHERE stored_at BETWEEN CAST('2022-11-01 20:00:00' AS DATETIME) AND CAST('2022-11-15 21:00:00' AS DATETIME);


Limit Number of Rows
SYNTAX : SELECT col_list FROM table_name LIMIT [offset, ] row_count;


SELECT * FROM books LIMIT 5;

Find books with highest quantity.
Find books with second highest quantity.
Find books with nth highest quantity.

SELECT col_list FROM table_name ORDER BY col LIMIT n-1, 1;

Find highest salary of employee.
Find second highest salary of employee.
Find Nth highest salary of employee.



LIKE Operator
- used for pattern matching

Wildcard
% wildcard
_ wildcard

a%			- starts with a
%a			- ends with a
%a%		- contains a

a_		- matches any string starts with a and followed by any one other charcater
a__		- matches any string starts with a and followed by any two other charcaters

_a		- matches any string starts with any character and followed by a only

Find names that contains a as middle character...
_a_ 	- will return those names which contains 3 characters only and mid character is a
Ram, Aam, Sam...


SELECT * FROM books WHERE title LIKE '%python';

SELECT * FROM books WHERE title LIKE '%\_a%';

=====================================================
Update Query

SYNTAX : UPDATE table_name SET col_name = value, WHERE condition;
UPDATE books SET quantity = 4 WHERE quantity = 3;

UPDATE books SET title = "Head First Java V2",  quantity = 6 WHERE book_id = 104;

Increment all quantities by 2;
UPDATE books SET quantity = quantity + 2;

Increment Salary of all employees by 10%;
UPDATE employees SET salary = salary + (salary * 10/100);

=====================================================

Group By and Having Clause
- Get total books of each author
- Get count of all unique books/author

SYNTAX : SELECT col_list, aggregate_function() from table_name WHERE condition GROUP BY col_list;

FROM - WHERE - GROUP BY - SELECT ----

aggregate_functions
- min
- max
- avg
- sum
- count

SELECT author from books GROUP BY author;
SELECT author, count(*) from books GROUP BY author;
SELECT author, count(*) as book_count from books GROUP BY author ORDER BY book_count DESC;
SELECT author, sum(quantity) as total_books from books GROUP BY author;
SELECT author, sum(quantity) as total_books from books GROUP BY author;

SELECT author, sum(quantity) as total_books from books GROUP BY author HAVING total_books > 10;
========================================

Get total/avg/min/max salary of employees living in each city.
SELECT emp_city, sum(salary) as total_salary FROM emps GROUP BY emp_city;
SELECT emp_city, avg(salary) as avg_salary FROM emps GROUP BY emp_city;
SELECT emp_city, min(salary) as min_salary FROM emps GROUP BY emp_city;
SELECT emp_city, max(salary) as max_salary FROM emps GROUP BY emp_city;


SELECT emp_city, sum(salary) as total_sal, max(salary) as max_salary, min(salary) as min_salary FROM emps GROUP BY emp_city;

========================================

Joins
- Inner Join
- Left Join
- Right Join
- Cross Join
- Self Join
- Outer Join (Not supported in MySQL)

SYNTAX : SELECT col_list FROM table_1 INNER JOIN table_2 ON join_condition;


LOAD DATA INFILE 'D:\users.csv' INTO TABLE users FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\n' IGNORE 1 ROWS;

SELECT b.title, b.author, i.user_id, i.issue_date, i.is_returned from books b INNER JOIN issued_books i ON b.book_id = i.book_id;

SELECT b.title, b.author, i.user_id, count(i.user_id) as book_count from books b INNER JOIN issued_books i ON b.book_id = i.book_id group by user_id;

SELECT b.title, b.author, i.user_id, i.issue_date, i.is_returned from books b LEFT JOIN issued_books i ON b.book_id = i.book_id;

SELECT b.title, b.author, i.user_id, i.issue_date, i.is_returned from books b RIGHT JOIN issued_books i ON b.book_id = i.book_id;


Get users who has not issued any book yet.
Get users who has issued more than 2 books.
Get books which are issued more than 2 times.
Get users who issued Let Us C Only.
Get count of each book number of times issued.
Get book which is issued most number of times.
Get user who issued most books.


Self Join
- compare successive rows

SELECT t1.username, t2.username, t1.city FROM users t1 INNER JOIN users t2 ON t1.city=t2.city AND t1.username > t2.username;


Cross Join
SELECT t1.title, t1.author, t2.issue_date, t2.due_date FROM books t1 CROSS JOIN issued_books t2;


Joining 3 tables
SELECT t1.username, t2.title, t3.issue_date, t3.due_date, t3.is_returned FROM users t1 INNER JOIN issued_books t3 ON t1.user_id=t3.user_id INNER JOIN books t2 ON t2.book_id = t3.book_id;

SELECT t1.username, t2.title, count(t1.username), t3.issue_date, t3.due_date, t3.is_returned FROM users t1 INNER JOIN issued_books t3 ON t1.user_id=t3.user_id INNER JOIN books t2 ON t2.book_id = t3.book_id WHERE t3.is_returned=0 GROUP BY t1.username;

===========================================
Nested/Sub Queries
- evaluate sub query first and uses the result of sub query for outer query

SELECT title, author, quantity FROM books WHERE quantity = (SELECT MAX(quantity) FROM books);
SELECT title, author, quantity FROM books WHERE quantity > (SELECT AVG(quantity) FROM books);

SELECT book_id, title, author FROM books WHERE book_id NOT IN (SELECT DISTINCT book_id FROM issued_books);

SELECT book_id, title, author FROM books WHERE book_id IN (SELECT DISTINCT book_id FROM issued_books);

===========================================

Functions
- String
- Date and Time Functions
- Control Flow Functions
	- CASE
	- IF
	- IFNULL
	- NULLIF
- Windows Functions

SELECT SUM(CASE WHEN is_returned = 1 THEN 1 ELSE 0 END) AS 'Returned', SUM(CASE WHEN is_returned = 0 THEN 1 ELSE 0 END) AS 'Not Returned Yet' FROM issued_books;

SELECT issue_date, due_date, CASE WHEN is_returned = 1 THEN 'Returned on Time' ELSE 'Not Returned Yet' END AS 'is_ret' FROM issued_books;

SELECT *, IF(quantity > 15, "Highly Available", "Available") AS Availability FROM books;


Sum of books if returned or not using IF
Get COUNT of users in each city without using group by
 - each city will appear in a new column

=====================================

Date and Time Functions
SELECT CURDATE();
SELECT CURDATE(), CURRENT_DATE(), CURRENT_DATE;
SELECT NOW();
SELECT DATE(NOW());
SELECT TIME(NOW());

SELECT CURDATE(), DAY(CURDATE());
SELECT DATE(stored_at), count(*) FROM books GROUP BY DAY(stored_at);

SELECT issue_date, count(*) FROM issued_books GROUP BY DAY(issue_date);


SELECT MONTH(CURDATE());
SELECT issue_date, count(*) FROM issued_books GROUP BY MONTH(issue_date);

SELECT WEEK(CURDATE());
SELECT DAYNAME(CURDATE());
SELECT WEEKDAY(CURDATE());
0-Monday, 1-Tuesday, 2-Wednesday.....6-Sunday

SELECT YEAR(CURDATE());


SELECT DATEDIFF(date_1, date_2);
SELECT DATEDIFF(CURDATE(), '2020-10-10');
SELECT DATEDIFF('2022-12-20', CURDATE());


SELECT DATE_ADD(start_date, INTERVAL, expr unit);
SELECT DATE_ADD(NOW(), INTERVAL 2 MONTH) result;
SELECT DATE_ADD(NOW(), INTERVAL 2 DAY) result;

SELECT DATE_SUB(NOW(), INTERVAL 2 MONTH) result;

SELECT TIMESTAMPDIFF(MONTH, '2021-10-12', CURDATE());
SELECT PERIOD_DIFF(EXTRACT(MONTH FROM CURDATE()), EXTRACT(MONTH FROM '2022-04-03')) as month_diff;

Format of date that we pass in PERIOD_DIFF - YYMM / YYYYMM
SELECT PERIOD_DIFF(202212,202010);

============================================
String Functions

LENGTH
LEFT
RIGHT
LTRIM
RTRIM
TRIM
LOWER
UPPER
REPLACE
SUBSTRING
CONCAT

============================================
Windows Functions
















