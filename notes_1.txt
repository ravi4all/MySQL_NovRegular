Database Design

- Logical
- Physical

Database Development Life Cycle
- Requirement Analysis
  - Planning
  - System definition
- Database Design
  - Logical Model
  - Physical Model
- Implementation
  - Loading and Testing

2 types of database techniques
- Normalization
  - 1NF - each cell must contain single value
  - 2NF - it must be in 1NF, there should be a primary key
  - 3NF - it must be in 2NF, has no transitive functional dependencies
  - BCNF - Boyce-Codd NF / 3.5NF

- ER Modeling - Entity Relationship

=====================================

MySQL

- Database Handling

Check current database in which we are present
- SELECT database();

Create Database Syntax
- CREATE DATABASE db_name;

- CREATE DATABASE [IF NOT EXISTS] database_name [CHARACTER SET charset_name] [COLLATE collation_name] ENCRYPTION = {'Y' | 'N'}


How to check length and memory taken by each character ?

SET @str = CONVERT('Hello World' USING utf8);
SELECT LENGTH(@str), CHAR_LENGTH(@str);

==================================================
How to check if a table exists in MySQL ?

- SELECT * FROM information_schema.tables WHERE table_schema = "db_name" AND table_name = "table_name" LIMIT 1;

==================================================
Create Table
- CREATE TABLE [IF NOT EXISTS] table_name (col_name data_type, col_name data_type... table_constraints) ENGINE = storage_engine;

col_name data_type(length) [Not Null] [Default Value] [Auto_Increment] col_constraint


CREATE TABLE IF NOT EXISTS books (book_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(255) NOT NULL, author VARCHAR(255), status TINYINT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

CREATE TABLE IF NOT EXISTS users (user_id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(255), city VARCHAR(255));

CREATE TABLE IF NOT EXISTS books_issue (issue_id INT, book_id INT, user_id INT, issue_date DATE, due_date DATE, is_returned BOOLEAN NOT NULL DEFAULT FALSE, PRIMARY KEY (issue_id), FOREIGN KEY (book_id) REFERENCES books (book_id), FOREIGN KEY (user_id) REFERENCES users (user_id));



Table Operations
- Rename Table
 SYNTAX : RENAME TABLE old_table_name TO new_table_name
 Query : RENAME TABLE books_issue TO issued_books;

- Add New Column
 SYNTAX : ALTER TABLE table_name ADD new_col_name col_defintion [FIRST | AFTER col_name]
 ALTER TABLE books ADD quantity INT NOT NULL AFTER status;

- Modify Column
 SYNTAX : ALTER TABLE table_name MODIFY col_name col_def;
 ALTER TABLE books MODIFY quantity SMALLINT NOT NULL;

- Rename Column
 SYNTAX : ALTER TABLE table_name CHANGE COLUMN orig_col_name new_name col_definition
 ALTER TABLE books CHANGE COLUMN created_at stored_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP; 

DROP Column
 SYNTAX : ALTER TABLE table_name DROP COLUMN col_name;
 
DELETE Table
- deletes data row by row

TRUNCATE Table
- more efficient than delete table, because it drops the table and recreate empty table




Storage Engine
- InnoDB  - 64 TB
- MyISAM - 256 TB
- CSV

Data Types
- Numeric
	- Integral
	  - tinyint				- 1 Byte		-128 to 127
	  - smallint				- 2 Bytes		-32768 to 32767
	  - mediumint			- 3 Bytes
	  - int						- 4 Bytes
	  - bigint					- 8 Bytes
 	- Floating Point
	  - Float					- 4 Bytes
	  - Double				- 8 Bytes
	  - Decimal				- It varies

- Text/String
  - Char			- fixed length character string
  - Varchar		- variable length
  - TinyText		- 255 Bytes - 255 Character
  - Text			- 64 KB (65,535)
  - MediumText	- 16 MB
  - LongText	- 4 GB
  - Binary
  - TinyBlob 
  - Blob (Binary Large Object)
  - Medium Blob
  - LongBlob

- Boolean - MySQL donot have Boolean data type, so we take TinyInt(1)
- Date and Time
	- Date
	- Time
	- DateTime		- 1000-01-01 00:00:01 to 9999-12-31 23:59:59
	- TimeStamp	- 1970-01-01 00:00:01 to 2038-01-19 03:14:07

====================================================
Insert Data

SYNTAX : INSERT INTO table_name (c1, c2, c3...cn) VALUES (v1, v2, v3...), (v1, v2...);
SYNTAX : INSERT INTO table_name VALUES (v1, v2, v3...), (v1, v2...);

INSERT INTO books (book_id, title, author, status, quantity) VALUES (101, "Python Programming", "XYZ", 1,10);
INSERT INTO books (title, author, status, quantity) VALUES ("Let Us C", "John", 1,5);

INSERT INTO books VALUES ("MySQL", "Shawn", 1,11);





